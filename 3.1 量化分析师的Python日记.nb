{
 "father": "54ca15f9f9f06c276f651a56",
 "metadata": {
  "signature": "sha256:44f78b71ec00586a685fd4ea1b7fd853a8c2b5606d3be1c629ec2df7e5b4245b"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "id": "37FF04309DCE4E7CBB516CB5E66EB27F",
     "metadata": {},
     "source": [
      "###\u63a5\u4e0b\u6765\u8981\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u7684\u7cfb\u5217\u4e2d\u5305\u542b\u4e86Python\u5728\u91cf\u5316\u91d1\u878d\u4e2d\u8fd0\u7528\u6700\u5e7f\u6cdb\u7684\u51e0\u4e2aLibrary:\n",
      "\n",
      "numpy\n",
      "\n",
      "scipy\n",
      "\n",
      "pandas\n",
      "\n",
      "matplotlib\n",
      "\n",
      "\u4f1a\u7ed9\u521d\u5b66\u8005\u4e00\u4e00\u4ecb\u7ecd\n",
      "\n",
      "###NumPy \u7b80\u4ecb"
     ]
    },
    {
     "cell_type": "markdown",
     "id": "94C9A94B082F426E811C75102BF00497",
     "metadata": {},
     "source": [
      "####\u4e00\u3001NumPy\u662f\u4ec0\u4e48\uff1f\n",
      "\n",
      "\u91cf\u5316\u5206\u6790\u7684\u5de5\u4f5c\u6d89\u53ca\u5230\u5927\u91cf\u7684\u6570\u503c\u8fd0\u7b97\uff0c\u4e00\u4e2a\u9ad8\u6548\u65b9\u4fbf\u7684\u79d1\u5b66\u8ba1\u7b97\u5de5\u5177\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002Python\u8bed\u8a00\u4e00\u5f00\u59cb\u5e76\u4e0d\u662f\u8bbe\u8ba1\u4e3a\u79d1\u5b66\u8ba1\u7b97\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u53d1\u73b0Python\u7684\u6613\u7528\u6027\uff0c\u9010\u6e10\u51fa\u73b0\u4e86\u5173\u4e8ePython\u7684\u5927\u91cf\u5916\u90e8\u6269\u5c55\uff0cNumPy (Numeric Python)\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\u3002NumPy\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u6570\u503c\u7f16\u7a0b\u5de5\u5177\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5904\u7406\u5411\u91cf\u3001\u77e9\u9635\u7b49\u8fd0\u7b97\uff0c\u6781\u5927\u5730\u4fbf\u5229\u4e86\u4eba\u4eec\u5728\u79d1\u5b66\u8ba1\u7b97\u65b9\u9762\u7684\u5de5\u4f5c\u3002\u53e6\u4e00\u65b9\u9762\uff0cPython\u662f\u514d\u8d39\uff0c\u76f8\u6bd4\u4e8e\u82b1\u8d39\u9ad8\u989d\u7684\u8d39\u7528\u4f7f\u7528Matlab\uff0cNumPy\u7684\u51fa\u73b0\u4f7fPython\u5f97\u5230\u4e86\u66f4\u591a\u4eba\u7684\u9752\u7750\u3002\n",
      "\n",
      "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u770b\u4e00\u4e0b\u5982\u4f55\u5f00\u59cb\u4f7f\u7528NumPy\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "886AB8B1F9EA44BF830208B3D3400B77",
     "input": [
      "import numpy\n",
      "numpy.version.full_version"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "'1.8.0'"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "81607E153EE14471A51234015EAA6298",
     "metadata": {},
     "source": [
      "\u6211\u4eec\u4f7f\u7528\u4e86\"import\"\u547d\u4ee4\u5bfc\u5165\u4e86NumPy\uff0c\u5e76\u4f7f\u7528numpy.version.full_version\u67e5\u51fa\u4e86\u91cf\u5316\u5b9e\u9a8c\u5ba4\u91cc\u4f7f\u7528\u7684NumPy\u7248\u672c\u4e3a1.8.0\u3002\u5728\u5f80\u540e\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u5c06\u5927\u91cf\u4f7f\u7528NumPy\u4e2d\u7684\u51fd\u6570\uff0c\u6bcf\u6b21\u90fd\u6dfb\u52a0numpy\u5728\u51fd\u6570\u524d\u4f5c\u4e3a\u524d\u7f00\u6bd4\u8f83\u8d39\u52b2\uff0c\u5728\u4e4b\u524d\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u63d0\u53ca\u4e86\u5f15\u5165\u5916\u90e8\u6269\u5c55\u6a21\u5757\u65f6\u7684\u5c0f\u6280\u5de7\uff0c\u53ef\u4ee5\u4f7f\u7528\"from numpy import *\"\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\n",
      "\n",
      "\u90a3\u4e48\u95ee\u9898\u89e3\u51b3\u4e86\uff1f\u6162\uff01Python\u7684\u5916\u90e8\u6269\u5c55\u6210\u5343\u4e0a\u4e07\uff0c\u5728\u4f7f\u7528\u4e2d\u5f88\u53ef\u80fd\u4f1aimport\u597d\u51e0\u4e2a\u5916\u90e8\u6269\u5c55\u6a21\u5757\uff0c\u5982\u679c\u67d0\u4e2a\u6a21\u5757\u5305\u542b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u4e0e\u53e6\u4e00\u4e2a\u6a21\u5757\u540c\u540d\uff0c\u5c31\u5fc5\u987b\u4f7f\u7528import module\u6765\u907f\u514d\u540d\u5b57\u7684\u51b2\u7a81\u3002\u5373\u6240\u8c13\u7684\u540d\u5b57\u7a7a\u95f4\uff08namespace\uff09\u6df7\u6dc6\u4e86\uff0c\u6240\u4ee5\u8fd9\u524d\u7f00\u6700\u597d\u8fd8\u662f\u5e26\u4e0a\u3002\n",
      "\n",
      "\u90a3\u6709\u6ca1\u6709\u7b80\u5355\u7684\u529e\u6cd5\u5462\uff1f\u6709\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728import\u6269\u5c55\u6a21\u5757\u65f6\u6dfb\u52a0\u6a21\u5757\u5728\u7a0b\u5e8f\u4e2d\u7684\u522b\u540d\uff0c\u8c03\u7528\u65f6\u5c31\u4e0d\u5fc5\u5199\u6210\u5168\u540d\u4e86\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\"np\"\u4f5c\u4e3a\u522b\u540d\u5e76\u8c03\u7528version.full_version\u51fd\u6570\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "3D2834611FCE4B608F64D9476092B22A",
     "input": [
      "import numpy as np\n",
      "np.version.full_version"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'1.8.0'"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "6DD6D37EC165444797661AE2B06CF2D3",
     "metadata": {},
     "source": [
      "####\u4e8c\u3001\u521d\u7aa5NumPy\u5bf9\u8c61\uff1a\u6570\u7ec4\n",
      "\n",
      "NumPy\u4e2d\u7684\u57fa\u672c\u5bf9\u8c61\u662f\u540c\u7c7b\u578b\u7684\u591a\u7ef4\u6570\u7ec4\uff08homogeneous multidimensional array\uff09\uff0c\u8fd9\u548cC++\u4e2d\u7684\u6570\u7ec4\u662f\u4e00\u81f4\u7684\uff0c\u4f8b\u5982\u5b57\u7b26\u578b\u548c\u6570\u503c\u578b\u5c31\u4e0d\u53ef\u5171\u5b58\u4e8e\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u5148\u4e0a\u4f8b\u5b50\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "EE85AED4A4F54FFCBC62B8CE00823154",
     "input": [
      "a = np.arange(20)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "id": "A6FCE2608AF244349D1867C811EEE45C",
     "metadata": {},
     "source": [
      "\u8fd9\u91cc\u6211\u4eec\u751f\u6210\u4e86\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4a\uff0c\u4ece0\u5f00\u59cb\uff0c\u6b65\u957f\u4e3a1\uff0c\u957f\u5ea6\u4e3a20\u3002Python\u4e2d\u7684\u8ba1\u6570\u662f\u4ece0\u5f00\u59cb\u7684\uff0cR\u548cMatlab\u7684\u4f7f\u7528\u8005\u9700\u8981\u5c0f\u5fc3\u3002\u53ef\u4ee5\u4f7f\u7528print\u67e5\u770b\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "8D88EC6232424D93BF25E921E06B5FC1",
     "input": [
      "print a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "AFDF50F79D75448E8C285A98A4012639",
     "metadata": {},
     "source": [
      "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\"type\"\u51fd\u6570\u67e5\u770ba\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u663e\u793aa\u662f\u4e00\u4e2aarray\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "079F271AC5CD4028BE5B15A21BCE1722",
     "input": [
      "type(a)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "numpy.ndarray"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "020E7F214D624A6288298E54D30D41BB",
     "metadata": {},
     "source": [
      "\u901a\u8fc7\u51fd\u6570\"reshape\"\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u6784\u9020\u4e00\u4e0b\u8fd9\u4e2a\u6570\u7ec4\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a4\\*5\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\"reshape\"\u7684\u53c2\u6570\u8868\u793a\u5404\u7ef4\u5ea6\u7684\u5927\u5c0f\uff0c\u4e14\u6309\u5404\u7ef4\u987a\u5e8f\u6392\u5217\uff08\u4e24\u7ef4\u65f6\u5c31\u662f\u6309\u884c\u6392\u5217\uff0c\u8fd9\u548cR\u4e2d\u6309\u5217\u662f\u4e0d\u540c\u7684\uff09\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "D62902AF53B44195959554D3A89A0D6F",
     "input": [
      "a = a.reshape(4, 5)\n",
      "print a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "76D9EB787081440A80978FA9D2813D69",
     "metadata": {},
     "source": [
      "\u6784\u9020\u66f4\u9ad8\u7ef4\u7684\u4e5f\u6ca1\u95ee\u9898:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "72BFFF47630F43D2B19BC1DB5EDB5884",
     "input": [
      "a = a.reshape(2, 2, 5)\n",
      "print a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[[ 0  1  2  3  4]\n",
        "  [ 5  6  7  8  9]]\n",
        "\n",
        " [[10 11 12 13 14]\n",
        "  [15 16 17 18 19]]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "EA6B1CC94487492EAC969723F2900AA9",
     "metadata": {},
     "source": [
      "\u65e2\u7136a\u662farray\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8c03\u7528array\u7684\u51fd\u6570\u8fdb\u4e00\u6b65\u67e5\u770ba\u7684\u76f8\u5173\u5c5e\u6027\uff1a\"ndim\"\u67e5\u770b\u7ef4\u5ea6\uff1b\"shape\"\u67e5\u770b\u5404\u7ef4\u5ea6\u7684\u5927\u5c0f\uff1b\"size\"\u67e5\u770b\u5168\u90e8\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b49\u4e8e\u5404\u7ef4\u5ea6\u5927\u5c0f\u7684\u4e58\u79ef\uff1b\"dtype\"\u53ef\u67e5\u770b\u5143\u7d20\u7c7b\u578b\uff1b\"dsize\"\u67e5\u770b\u5143\u7d20\u5360\u4f4d\uff08bytes\uff09\u5927\u5c0f\u3002"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "454B506443DA448295A3C744C1E2C35B",
     "input": [
      "a.ndim"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "3"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "7756EC5A000C4427AF018DC0E029FF3B",
     "input": [
      "a.shape"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "(2, 2, 5)"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "83091E2AFEA24601812D13587B3D6A5E",
     "input": [
      "a.size"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "20"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "1E830F7141DC40158E0C9A3E9F4DBCF5",
     "input": [
      "a.dtype"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "dtype('int64')"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "AABA70320162499CA9853B8834EE3758",
     "metadata": {},
     "source": [
      "#### \u4e09\u3001\u521b\u5efa\u6570\u7ec4\n",
      "\n",
      "\u6570\u7ec4\u7684\u521b\u5efa\u53ef\u901a\u8fc7\u8f6c\u6362\u5217\u8868\u5b9e\u73b0\uff0c\u9ad8\u7ef4\u6570\u7ec4\u53ef\u901a\u8fc7\u8f6c\u6362\u5d4c\u5957\u5217\u8868\u5b9e\u73b0\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "CCFE303F59424B518C0C12E813134742",
     "input": [
      "raw = [0,1,2,3,4]\n",
      "a = np.array(raw)\n",
      "a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "array([0, 1, 2, 3, 4])"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "DF37987CC61A4B97AF617DE23DB96312",
     "input": [
      "raw = [[0,1,2,3,4], [5,6,7,8,9]]\n",
      "b = np.array(raw)\n",
      "b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "array([[0, 1, 2, 3, 4],\n",
        "       [5, 6, 7, 8, 9]])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "681D04EFAAB947EE8126B31746203EA5",
     "metadata": {},
     "source": [
      "\u4e00\u4e9b\u7279\u6b8a\u7684\u6570\u7ec4\u6709\u7279\u522b\u5b9a\u5236\u7684\u547d\u4ee4\u751f\u6210\uff0c\u59824*5\u7684\u5168\u96f6\u77e9\u9635\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "DC28C68F209F407E83C3BF2829C699F5",
     "input": [
      "d = (4, 5)\n",
      "np.zeros(d)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "array([[ 0.,  0.,  0.,  0.,  0.],\n",
        "       [ 0.,  0.,  0.,  0.,  0.],\n",
        "       [ 0.,  0.,  0.,  0.,  0.],\n",
        "       [ 0.,  0.,  0.,  0.,  0.]])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "4EAACB013C7242D2862F4B10F56555D2",
     "metadata": {},
     "source": [
      "\u9ed8\u8ba4\u751f\u6210\u7684\u7c7b\u578b\u662f\u6d6e\u70b9\u578b\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u6539\u4e3a\u6574\u578b\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "961A9736F279458D803CF1D090194329",
     "input": [
      "d = (4, 5)\n",
      "np.ones(d, dtype=int)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "array([[1, 1, 1, 1, 1],\n",
        "       [1, 1, 1, 1, 1],\n",
        "       [1, 1, 1, 1, 1],\n",
        "       [1, 1, 1, 1, 1]])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "D7A1E414819E4ECC8B028556AB9F68C9",
     "metadata": {},
     "source": [
      "[0, 1)\u533a\u95f4\u7684\u968f\u673a\u6570\u6570\u7ec4\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "61CC960EEA2B44A482FBD1D611ECD184",
     "input": [
      "np.random.rand(10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "array([ 0.69647248,  0.88594857,  0.42677693,  0.5096919 ,  0.91365312,\n",
        "        0.15167785,  0.43943875,  0.61663414,  0.27427107,  0.21334846])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "5C0A7EF031D64F6C8F0A001AA94FDCAC",
     "metadata": {},
     "source": [
      "####\u56db\u3001\u6570\u7ec4\u64cd\u4f5c\n",
      "\n",
      "\u7b80\u5355\u7684\u56db\u5219\u8fd0\u7b97\u5df2\u7ecf\u91cd\u8f7d\u8fc7\u4e86\uff0c\u5168\u90e8\u7684'+'\uff0c'-'\uff0c'*'\uff0c'/'\u8fd0\u7b97\u90fd\u662f\u57fa\u4e8e\u5168\u90e8\u7684\u6570\u7ec4\u5143\u7d20\u7684\uff0c\u4ee5\u52a0\u6cd5\u4e3a\u4f8b\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "1B97D70B827C40EC90EFE3C626C9F6D9",
     "input": [
      "a = np.array([[1.0, 2], [2, 4]])\n",
      "print \"a:\"\n",
      "print a\n",
      "b = np.array([[3.2, 1.5], [2.5, 4]])\n",
      "print \"b:\"\n",
      "print b\n",
      "print \"a+b:\"\n",
      "print a+b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 1.  2.]\n",
        " [ 2.  4.]]\n",
        "b:\n",
        "[[ 3.2  1.5]\n",
        " [ 2.5  4. ]]\n",
        "a+b:\n",
        "[[ 4.2  3.5]\n",
        " [ 4.5  8. ]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "3E2A8BADDE4244AD8919D371AFD9A7E5",
     "metadata": {},
     "source": [
      "\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\uff0ca\u4e2d\u867d\u7136\u4ec5\u6709\u4e00\u4e2a\u4e0e\u5143\u7d20\u662f\u6d6e\u70b9\u6570\uff0c\u5176\u4f59\u5747\u4e3a\u6574\u6570\uff0c\u5728\u5904\u7406\u4e2dPython\u4f1a\u81ea\u52a8\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff08\u56e0\u4e3a\u6570\u7ec4\u662f\u540c\u8d28\u7684\uff09\uff0c\u5e76\u4e14\uff0c\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u76f8\u52a0\u8981\u6c42\u5404\u7ef4\u5ea6\u5927\u5c0f\u76f8\u540c\u3002\u5f53\u7136\uff0cNumPy\u91cc\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u4e5f\u53ef\u4ee5\u5bf9\u6807\u91cf\u548c\u6570\u7ec4\u64cd\u4f5c\uff0c\u7ed3\u679c\u662f\u6570\u7ec4\u7684\u5168\u90e8\u5143\u7d20\u5bf9\u5e94\u8fd9\u4e2a\u6807\u91cf\u8fdb\u884c\u8fd0\u7b97\uff0c\u8fd8\u662f\u4e00\u4e2a\u6570\u7ec4\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "F84948A6C6834287828E29FA44AFF787",
     "input": [
      "print \"3 * a:\"\n",
      "print 3 * a\n",
      "print \"b + 1.8:\"\n",
      "print b + 1.8"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3 * a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[  3.   6.]\n",
        " [  6.  12.]]\n",
        "b + 1.8:\n",
        "[[ 5.   3.3]\n",
        " [ 4.3  5.8]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "1F36B9AFBD3145E28F8C565CEA572691",
     "metadata": {},
     "source": [
      "\u7c7b\u4f3cC++\uff0c'+='\u3001'-='\u3001'*='\u3001'/='\u64cd\u4f5c\u7b26\u5728NumPy\u4e2d\u540c\u6837\u652f\u6301\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "DFB450C1231E47B18AABEAB2968B23CD",
     "input": [
      "a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "array([[ 1.,  2.],\n",
        "       [ 2.,  4.]])"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "97ABDED9E20147E68B57C802A474CAC8",
     "input": [
      "a /= 2\n",
      "print a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0.5  1. ]\n",
        " [ 1.   2. ]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "F033DFB5FB0B4DD08AF300F54985D4AB",
     "metadata": {},
     "source": [
      "\u5f00\u6839\u53f7\u6c42\u6307\u6570\u4e5f\u5f88\u5bb9\u6613\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "61E14C4883EF497E822CC26F4CC9FE57",
     "input": [
      "print \"a:\"\n",
      "print a\n",
      "print \"np.exp(a):\"\n",
      "print np.exp(a)\n",
      "print \"np.sqrt(a):\"\n",
      "print np.sqrt(a)\n",
      "print \"np.square(a):\"\n",
      "print np.square(a)\n",
      "print \"np.power(a, 3):\"\n",
      "print np.power(a, 3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0.5  1. ]\n",
        " [ 1.   2. ]]\n",
        "np.exp(a):\n",
        "[[ 1.64872127  2.71828183]\n",
        " [ 2.71828183  7.3890561 ]]\n",
        "np.sqrt(a):\n",
        "[[ 0.70710678  1.        ]\n",
        " [ 1.          1.41421356]]\n",
        "np.square(a):\n",
        "[[ 0.25  1.  ]\n",
        " [ 1.    4.  ]]\n",
        "np.power(a, 3):\n",
        "[[ 0.125  1.   ]\n",
        " [ 1.     8.   ]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "3B9A065E050B4BD69CACE9F40859294E",
     "metadata": {},
     "source": [
      "\u9700\u8981\u77e5\u9053\u4e8c\u7ef4\u6570\u7ec4\u7684\u6700\u5927\u6700\u5c0f\u503c\u600e\u4e48\u529e\uff1f\u60f3\u8ba1\u7b97\u5168\u90e8\u5143\u7d20\u7684\u548c\u3001\u6309\u884c\u6c42\u548c\u3001\u6309\u5217\u6c42\u548c\u600e\u4e48\u529e\uff1ffor\u5faa\u73af\u5417\uff1f\u4e0d\uff0cNumPy\u7684ndarray\u7c7b\u5df2\u7ecf\u505a\u597d\u51fd\u6570\u4e86\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "A93F54E07EFD44D286B52B109CC05E5F",
     "input": [
      "a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "array([[ 0.5,  1. ],\n",
        "       [ 1. ,  2. ]])"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "CF287F96A00D4F37B721793C4CDECB22",
     "input": [
      "str?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "4C8DF53F85254CA3A507EECEE7652E5E",
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "'<built-in method max of numpy.ndarray object at 0x5392010>'"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "140D559F68E74289842EF9C6B4BBF106",
     "input": [
      "a = np.arange(20).reshape(4,5)\n",
      "print \"a:\"\n",
      "print a\n",
      "print \"sum of all elements in a: \" + str(a.sum())\n",
      "print \"maximum element in a: \" + str(a.max())\n",
      "print \"minimum element in a: \" + str(a.min())\n",
      "print \"maximum element in each row of a: \" + str(a.max(axis=1))\n",
      "print \"minimum element in each column of a: \" + str(a.min(axis=0))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]\n",
        "sum of all elements in a: 190\n",
        "maximum element in a: 19\n",
        "minimum element in a: 0\n",
        "maximum element in each row of a: [ 4  9 14 19]\n",
        "minimum element in each column of a: [0 1 2 3 4]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "F8800E8399994F2DB52EE6A2CED084EA",
     "input": [
      "a.__class__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "numpy.ndarray"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "BD675C2A74C9494B81012B21560945C8",
     "input": [
      "a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "array([[ 0.5,  1. ],\n",
        "       [ 1. ,  2. ]])"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "2FCCB54749904215B2F05FE7FC02E756",
     "input": [
      "a.min(axis = 1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "array([ 0.5,  1. ])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "C1140788990E445691FF0F8DBE8CF038",
     "metadata": {},
     "source": [
      "\u79d1\u5b66\u8ba1\u7b97\u4e2d\u5927\u91cf\u4f7f\u7528\u5230\u77e9\u9635\u8fd0\u7b97\uff0c\u9664\u4e86\u6570\u7ec4\uff0cNumPy\u540c\u65f6\u63d0\u4f9b\u4e86\u77e9\u9635\u5bf9\u8c61\uff08matrix\uff09\u3002\u77e9\u9635\u5bf9\u8c61\u548c\u6570\u7ec4\u7684\u4e3b\u8981\u6709\u4e24\u70b9\u5dee\u522b\uff1a\u4e00\u662f\u77e9\u9635\u662f\u4e8c\u7ef4\u7684\uff0c\u800c\u6570\u7ec4\u7684\u53ef\u4ee5\u662f\u4efb\u610f\u6b63\u6574\u6570\u7ef4\uff1b\u4e8c\u662f\u77e9\u9635\u7684'\\*'\u64cd\u4f5c\u7b26\u8fdb\u884c\u7684\u662f\u77e9\u9635\u4e58\u6cd5\uff0c\u4e58\u53f7\u5de6\u4fa7\u7684\u77e9\u9635\u5217\u548c\u4e58\u53f7\u53f3\u4fa7\u7684\u77e9\u9635\u884c\u8981\u76f8\u7b49\uff0c\u800c\u5728\u6570\u7ec4\u4e2d'\\*'\u64cd\u4f5c\u7b26\u8fdb\u884c\u7684\u662f\u6bcf\u4e00\u5143\u7d20\u7684\u5bf9\u5e94\u76f8\u4e58\uff0c\u4e58\u53f7\u4e24\u4fa7\u7684\u6570\u7ec4\u6bcf\u4e00\u7ef4\u5927\u5c0f\u9700\u8981\u4e00\u81f4\u3002\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7asmatrix\u6216\u8005mat\u8f6c\u6362\u4e3a\u77e9\u9635\uff0c\u6216\u8005\u76f4\u63a5\u751f\u6210\u4e5f\u53ef\u4ee5\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "084393168B164BC18D79D21C1F9553CE",
     "input": [
      "a = np.arange(20).reshape(4, 5)\n",
      "print a \n",
      "print type(a)\n",
      "a = np.asmatrix(a)\n",
      "print a \n",
      "print type(a)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<type 'numpy.ndarray'>\n",
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]\n",
        "<class 'numpy.matrixlib.defmatrix.matrix'>\n"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "7542DB7CED5347B7AA22C6806BE5AB8E",
     "input": [
      "b = np.matrix('1.0 2.0; 3.0 4.0')\n",
      "print b\n",
      "print type(b)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 1.  2.]\n",
        " [ 3.  4.]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<class 'numpy.matrixlib.defmatrix.matrix'>\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "9DF3D2B944DF4265928C32855F1A336A",
     "metadata": {},
     "source": [
      "\u518d\u6765\u770b\u4e00\u4e0b\u77e9\u9635\u7684\u4e58\u6cd5\uff0c\u8fd9\u4f7f\u7528arange\u751f\u6210\u53e6\u4e00\u4e2a\u77e9\u9635b\uff0carange\u51fd\u6570\u8fd8\u53ef\u4ee5\u901a\u8fc7arange(\u8d77\u59cb\uff0c\u7ec8\u6b62\uff0c\u6b65\u957f)\u7684\u65b9\u5f0f\u8c03\u7528\u751f\u6210\u7b49\u5dee\u6570\u5217\uff0c\u6ce8\u610f\u542b\u5934\u4e0d\u542b\u5c3e\u3002"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "1484509595AC42A1888BCA4A5F895111",
     "input": [
      "b = np.arange(2, 45, 3).reshape(5, 3)\n",
      "print b \n",
      "print type(b)\n",
      "b = np.mat(b)\n",
      "print type(b)\n",
      "print b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 2  5  8]\n",
        " [11 14 17]\n",
        " [20 23 26]\n",
        " [29 32 35]\n",
        " [38 41 44]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<type 'numpy.ndarray'>\n",
        "<class 'numpy.matrixlib.defmatrix.matrix'>\n",
        "[[ 2  5  8]\n",
        " [11 14 17]\n",
        " [20 23 26]\n",
        " [29 32 35]\n",
        " [38 41 44]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "7F01A01D430345BC9C51F05438A0E58A",
     "metadata": {},
     "source": [
      "\u6709\u4eba\u8981\u95ee\u4e86\uff0carange\u6307\u5b9a\u7684\u662f\u6b65\u957f\uff0c\u5982\u679c\u60f3\u6307\u5b9a\u751f\u6210\u7684\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u600e\u4e48\u529e\uff1f\u597d\u529e\uff0c\"linspace\"\u5c31\u53ef\u4ee5\u505a\u5230\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "74AD4A89A09142608B43F292DD390871",
     "input": [
      "np.linspace(0, 2, 9)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "CE50263BA3F74FDC81FCDE0D92AF2950",
     "metadata": {},
     "source": [
      "\u56de\u5230\u6211\u4eec\u7684\u95ee\u9898\uff0c\u77e9\u9635a\u548cb\u505a\u77e9\u9635\u4e58\u6cd5\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "E7474BFB2A3B49D18E2C476C5658EE68",
     "input": [
      "print \"matrix a:\"\n",
      "print a\n",
      "print \"matrix b:\"\n",
      "print b\n",
      "c = a * b\n",
      "print \"matrix c:\"\n",
      "print c"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "matrix a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]\n",
        "matrix b:\n",
        "[[ 2  5  8]\n",
        " [11 14 17]\n",
        " [20 23 26]\n",
        " [29 32 35]\n",
        " [38 41 44]]\n",
        "matrix c:\n",
        "[[ 290  320  350]\n",
        " [ 790  895 1000]\n",
        " [1290 1470 1650]\n",
        " [1790 2045 2300]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "748D0706BE94467689BE92D9A20CB534",
     "metadata": {},
     "source": [
      "####\u4e94\u3001\u6570\u7ec4\u5143\u7d20\u8bbf\u95ee\n",
      "\n",
      "\u6570\u7ec4\u548c\u77e9\u9635\u5143\u7d20\u7684\u8bbf\u95ee\u53ef\u901a\u8fc7\u4e0b\u6807\u8fdb\u884c\uff0c\u4ee5\u4e0b\u5747\u4ee5\u4e8c\u7ef4\u6570\u7ec4\uff08\u6216\u77e9\u9635\uff09\u4e3a\u4f8b\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "8ECC9FCFA6BB449C94036C1B3EB663D1",
     "input": [
      "a = np.array([[3.2, 1.5], [2.5, 4]])\n",
      "print a[0][1]\n",
      "print a[0, 1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1.5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "1.5\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "C445CCA39E7F40CB8469F0EBDAD0BEBA",
     "metadata": {},
     "source": [
      "\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u6765\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u7684\u503c\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "1C253E4A5B6D434AB48A0B6B11CCDCB0",
     "input": [
      "b = a\n",
      "a[0][1] = 2.0\n",
      "print \"a:\"\n",
      "print a\n",
      "print \"b:\"\n",
      "print b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 3.2  2. ]\n",
        " [ 2.5  4. ]]\n",
        "b:\n",
        "[[ 3.2  2. ]\n",
        " [ 2.5  4. ]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "C7E246079A384C4597BF022BEFDB63DC",
     "metadata": {},
     "source": [
      "\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u660e\u660e\u6539\u7684\u662fa[0][1]\uff0c\u600e\u4e48\u8fdeb[0][1]\u4e5f\u8ddf\u7740\u53d8\u4e86\uff1f\u8fd9\u4e2a\u9677\u9631\u5728Python\u7f16\u7a0b\u4e2d\u5f88\u5bb9\u6613\u78b0\u4e0a\uff0c\u5176\u539f\u56e0\u5728\u4e8ePython\u4e0d\u662f\u771f\u6b63\u5c06a\u590d\u5236\u4e00\u4efd\u7ed9b\uff0c\u800c\u662f\u5c06b\u6307\u5230\u4e86a\u5bf9\u5e94\u6570\u636e\u7684\u5185\u5b58\u5730\u5740\u4e0a\u3002\u60f3\u8981\u771f\u6b63\u7684\u590d\u5236\u4e00\u4efda\u7ed9b\uff0c\u53ef\u4ee5\u4f7f\u7528copy\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "B83083F69E1E4FCE9ACA5455E5024B34",
     "input": [
      "a = np.array([[3.2, 1.5], [2.5, 4]])\n",
      "b = a.copy()\n",
      "a[0][1] = 2.0\n",
      "print \"a:\"\n",
      "print a\n",
      "print \"b:\"\n",
      "print b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 3.2  2. ]\n",
        " [ 2.5  4. ]]\n",
        "b:\n",
        "[[ 3.2  1.5]\n",
        " [ 2.5  4. ]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "10CB220E02D644958FC24B29426DE82D",
     "metadata": {},
     "source": [
      "\u82e5\u5bf9a\u91cd\u65b0\u8d4b\u503c\uff0c\u5373\u5c06a\u6307\u5230\u5176\u4ed6\u5730\u5740\u4e0a\uff0cb\u4ecd\u5728\u539f\u6765\u7684\u5730\u5740\u4e0a\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "FEE514FF380E4B59B6EE386C1AF0ECDA",
     "input": [
      "a = np.array([[3.2, 1.5], [2.5, 4]])\n",
      "b = a\n",
      "a = np.array([[2, 1], [9, 3]])\n",
      "print \"a:\"\n",
      "print a\n",
      "print \"b:\"\n",
      "print b"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[2 1]\n",
        " [9 3]]\n",
        "b:\n",
        "[[ 3.2  1.5]\n",
        " [ 2.5  4. ]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "1ED863EAF556489888CE3E66C06C6A98",
     "metadata": {},
     "source": [
      "\u5229\u7528':'\u53ef\u4ee5\u8bbf\u95ee\u5230\u67d0\u4e00\u7ef4\u7684\u5168\u90e8\u6570\u636e\uff0c\u4f8b\u5982\u53d6\u77e9\u9635\u4e2d\u7684\u6307\u5b9a\u5217\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "69098101FB9A471587F65B41B832046D",
     "input": [
      "a = np.arange(20).reshape(4, 5)\n",
      "print \"a:\"\n",
      "print a\n",
      "print \"the 2nd and 4th column of a:\"\n",
      "print a[:,[1,3]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]\n",
        "the 2nd and 4th column of a:\n",
        "[[ 1  3]\n",
        " [ 6  8]\n",
        " [11 13]\n",
        " [16 18]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "EC4D2B6AF05041D6B6B61740AB6E91A1",
     "metadata": {},
     "source": [
      "\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u6211\u4eec\u5c1d\u8bd5\u53d6\u51fa\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u8fd9\u5728\u6570\u636e\u7684\u5904\u7406\u4e2d\u5341\u5206\u5e38\u89c1\uff0c\u901a\u5e38\u7528\u5728\u5355\u884c\u5355\u5217\u4e0a\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u662f\u5c06\u7b2c\u4e00\u5217\u5927\u4e8e5\u7684\u5143\u7d20\uff0810\u548c15\uff09\u5bf9\u5e94\u7684\u7b2c\u4e09\u5217\u5143\u7d20\uff0812\u548c17\uff09\u53d6\u51fa\u6765\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "A8CE49B2494948DA8EED0D36B1DAA5A5",
     "input": [
      "print a[:,2]\n",
      "print a[:, 0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[ 2  7 12 17]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[ 0  5 10 15]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "0876821410664DF988D87F4F9BF5CA87",
     "input": [
      "a[:, 2][a[:, 0] > 5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "array([12, 17])"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "8E1C937F62094DCCA453944E17038A23",
     "metadata": {},
     "source": [
      "\u53ef\u4f7f\u7528where\u51fd\u6570\u67e5\u627e\u7279\u5b9a\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "987ECB7EEAC945268B1BDF94F05730B2",
     "input": [
      "print a\n",
      "loc = numpy.where(a==11)\n",
      "print loc\n",
      "print type(loc)\n",
      "print loc[0]\n",
      "print loc[0][0]\n",
      "print loc[1]\n",
      "print loc[1][0]\n",
      "print a[loc[0][0], loc[1][0]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0  1  2  3  4]\n",
        " [ 5  6  7  8  9]\n",
        " [10 11 12 13 14]\n",
        " [15 16 17 18 19]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "(array([2]), array([1]))\n",
        "<type 'tuple'>\n",
        "[2]\n",
        "2\n",
        "[1]\n",
        "1\n",
        "11\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "62C88F56CDB54DE48C55D0E412689E85",
     "metadata": {},
     "source": [
      "####\u516d\u3001\u6570\u7ec4\u64cd\u4f5c\n",
      "\n",
      "\u8fd8\u662f\u62ff\u77e9\u9635\uff08\u6216\u4e8c\u7ef4\u6570\u7ec4\uff09\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u9996\u5148\u6765\u770b\u77e9\u9635\u8f6c\u7f6e\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "3DC9E73452C749B580AE624D9C67126D",
     "input": [
      "a = np.random.rand(2,4)\n",
      "print \"a:\"\n",
      "print a\n",
      "a = np.transpose(a)\n",
      "print \"a is an array, by using transpose(a):\"\n",
      "print a\n",
      "b = np.random.rand(2,4)\n",
      "b = np.mat(b)\n",
      "print \"b:\"\n",
      "print b\n",
      "print \"b is a matrix, by using b.T:\"\n",
      "print b.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0.1572289   0.73271136  0.23111934  0.14959633]\n",
        " [ 0.31772698  0.22707239  0.280542    0.55553286]]\n",
        "a is an array, by using transpose(a):\n",
        "[[ 0.1572289   0.31772698]\n",
        " [ 0.73271136  0.22707239]\n",
        " [ 0.23111934  0.280542  ]\n",
        " [ 0.14959633  0.55553286]]\n",
        "b:\n",
        "[[ 0.41012094  0.97034197  0.64178756  0.44836363]\n",
        " [ 0.33722747  0.68072858  0.57106638  0.53737875]]\n",
        "b is a matrix, by using b.T:\n",
        "[[ 0.41012094  0.33722747]\n",
        " [ 0.97034197  0.68072858]\n",
        " [ 0.64178756  0.57106638]\n",
        " [ 0.44836363  0.53737875]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "72D50CD977E746D8A5373C2041BBF1A5",
     "metadata": {},
     "source": [
      "\u77e9\u9635\u6c42\u9006\uff1a"
     ]
    },
    {
     "cell_type": "markdown",
     "id": "E547B8F062614BB78DCF2DB3F7D3B943",
     "metadata": {},
     "source": [
      "---"
     ]
    },
    {
     "cell_type": "markdown",
     "id": "4B0ABE89CAEC4FDE81BABF478CBC5BB1",
     "metadata": {},
     "source": [
      "---"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "F0AA489793B3466A8AC38063306FD0F4",
     "input": [
      "import numpy.linalg as nlg\n",
      "a = np.random.rand(2,2)\n",
      "a = np.mat(a)\n",
      "print \"a:\"\n",
      "print a\n",
      "ia = nlg.inv(a)\n",
      "print \"inverse of a:\"\n",
      "print ia\n",
      "print \"a * inv(a)\"\n",
      "print a * ia"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0.86211266  0.6885563 ]\n",
        " [ 0.28798536  0.70810425]]\n",
        "inverse of a:\n",
        "[[ 1.71798445 -1.6705577 ]\n",
        " [-0.69870271  2.09163573]]\n",
        "a * inv(a)\n",
        "[[ 1.  0.]\n",
        " [ 0.  1.]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "76010E1C36804B3FA61E825F28F8F291",
     "metadata": {},
     "source": [
      "\u6c42\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "60544D20139E4B70A438FA66555FC6A4",
     "input": [
      "a = np.random.rand(3,3)\n",
      "eig_value, eig_vector = nlg.eig(a)\n",
      "print \"eigen value:\"\n",
      "print eig_value\n",
      "print \"eigen vector:\"\n",
      "print eig_vector"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "eigen value:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[ 1.35760609  0.43205379 -0.53470662]\n",
        "eigen vector:\n",
        "[[-0.76595379 -0.88231952 -0.07390831]\n",
        " [-0.55170557  0.21659887 -0.74213622]\n",
        " [-0.33005418  0.41784829  0.66616169]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "849B68131A654A37810E2B33C57A2E6F",
     "metadata": {},
     "source": [
      "\u6309\u5217\u62fc\u63a5\u4e24\u4e2a\u5411\u91cf\u6210\u4e00\u4e2a\u77e9\u9635\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "88E487C39FB545C39C6B5C37AA7E1154",
     "input": [
      "a = np.array((1,2,3))\n",
      "b = np.array((2,3,4))\n",
      "print np.column_stack((a,b))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[1 2]\n",
        " [2 3]\n",
        " [3 4]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "35E73161B3944830AB2A8D2622851C2A",
     "metadata": {},
     "source": [
      "\u5728\u5faa\u73af\u5904\u7406\u67d0\u4e9b\u6570\u636e\u5f97\u5230\u7ed3\u679c\u540e\uff0c\u5c06\u7ed3\u679c\u62fc\u63a5\u6210\u4e00\u4e2a\u77e9\u9635\u662f\u5341\u5206\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7vstack\u548chstack\u5b8c\u6210\uff1a"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "F9A1CBCAAE8448709FBEB241C1E8C035",
     "input": [
      "a = np.random.rand(2,2)\n",
      "b = np.random.rand(2,2)\n",
      "print \"a:\"\n",
      "print a\n",
      "print \"b:\"\n",
      "print a\n",
      "c = np.hstack([a,b])\n",
      "d = np.vstack([a,b])\n",
      "print \"horizontal stacking a and b:\"\n",
      "print c\n",
      "print \"vertical stacking a and b:\"\n",
      "print d"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "a:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "[[ 0.51560184  0.1243346 ]\n",
        " [ 0.58121227  0.24563485]]\n",
        "b:\n",
        "[[ 0.51560184  0.1243346 ]\n",
        " [ 0.58121227  0.24563485]]\n",
        "horizontal stacking a and b:\n",
        "[[ 0.51560184  0.1243346   0.3691454   0.91598195]\n",
        " [ 0.58121227  0.24563485  0.97552576  0.04519644]]\n",
        "vertical stacking a and b:\n",
        "[[ 0.51560184  0.1243346 ]\n",
        " [ 0.58121227  0.24563485]\n",
        " [ 0.3691454   0.91598195]\n",
        " [ 0.97552576  0.04519644]]\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "AAD880E0500541E28298414BFCA21A95",
     "metadata": {},
     "source": [
      "####\u4e03\u3001\u7f3a\u5931\u503c\n",
      "\n",
      "\u7f3a\u5931\u503c\u5728\u5206\u6790\u4e2d\u4e5f\u662f\u4fe1\u606f\u7684\u4e00\u79cd\uff0cNumPy\u63d0\u4f9bnan\u4f5c\u4e3a\u7f3a\u5931\u503c\u7684\u8bb0\u5f55\uff0c\u901a\u8fc7isnan\u5224\u5b9a\u3002"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "080587241E4D496A9A4FC1887F19EF89",
     "input": [
      "a = np.random.rand(2,2)\n",
      "a[0, 1] = np.nan\n",
      "print np.isnan(a)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[False  True]\n",
        " [False False]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "BD710F26D497487780658D749C34FF87",
     "metadata": {},
     "source": [
      "nan_to_num\u53ef\u7528\u6765\u5c06nan\u66ff\u6362\u62100\uff0c\u5728\u540e\u9762\u4f1a\u4ecb\u7ecd\u5230\u7684\u66f4\u9ad8\u7ea7\u7684\u6a21\u5757pandas\u65f6\uff0c\u6211\u4eec\u5c06\u770b\u5230pandas\u63d0\u4f9b\u80fd\u6307\u5b9anan\u66ff\u6362\u503c\u7684\u51fd\u6570\u3002"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "1F6A39BE68A447D281E77E5EF68E1451",
     "input": [
      "a"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 58,
       "text": [
        "array([[ 0.59171751,         nan],\n",
        "       [ 0.29463707,  0.40192021]])"
       ]
      }
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "id": "42FDA045F184448684ABCFFFF9B83BB8",
     "input": [
      "print np.nan_to_num(a)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[[ 0.59171751  0.        ]\n",
        " [ 0.29463707  0.40192021]]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ]
    },
    {
     "cell_type": "markdown",
     "id": "F6959F9FC119424283E89A1646994A84",
     "metadata": {},
     "source": [
      "NumPy\u8fd8\u6709\u5f88\u591a\u7684\u51fd\u6570\uff0c\u60f3\u8be6\u7ec6\u4e86\u89e3\u53ef\u53c2\u8003\u94fe\u63a5http://wiki.scipy.org/Numpy_Example_List \u548c http://docs.scipy.org/doc/numpy\n",
      "\n",
      "\u6700\u540e\u732e\u4e0aNumPy SciPy Pandas Cheat Sheet\n",
      "\n",
      "![my picture](http://datayes.oss-cn-hangzhou.aliyuncs.com/4.jpg)\n"
     ]
    },
    {
     "cell_type": "markdown",
     "id": "C7F0B768A559404B99CFACF9DA9A6A61",
     "metadata": {},
     "source": [
      "###\u53c2\u8003\u6587\u732e\n",
      "\n",
      "1. http://wiki.scipy.org/Tentative_NumPy_Tutorial\n",
      "2. Sheppard K. Introduction to Python for econometrics, statistics and data analysis. Self-published, University of Oxford, version, 2012, 2."
     ]
    }
   ],
   "metadata": {}
  }
 ]
}